# Security Analysis Workflow
# Comprehensive security scanning for the entrepreneurship ecosystem platform
# Author: Security Team
# Last Updated: 2025-06-14

name: üîí Security Analysis

on:
  # Trigger on push to main and develop branches
  push:
    branches: [ main, develop ]
    paths:
      - '**/*.py'
      - '**/*.yml'
      - '**/*.yaml'
      - '**/*.json'
      - '**/*.js'
      - '**/*.html'
      - '**/*.dockerfile'
      - '**/Dockerfile*'
      - 'requirements*.txt'
      - 'pyproject.toml'
      - '.github/workflows/**'

  # Trigger on pull requests to main and develop
  pull_request:
    branches: [ main, develop ]
    paths:
      - '**/*.py'
      - '**/*.yml'
      - '**/*.yaml'
      - '**/*.json'
      - '**/*.js'
      - '**/*.html'
      - '**/*.dockerfile'
      - '**/Dockerfile*'
      - 'requirements*.txt'
      - 'pyproject.toml'
      - '.github/workflows/**'

  # Weekly scheduled scan
  schedule:
    - cron: '0 6 * * 1'  # Every Monday at 6 AM UTC

  # Manual trigger
  workflow_dispatch:
    inputs:
      scan_level:
        description: 'Security scan level'
        required: true
        default: 'standard'
        type: choice
        options:
          - standard
          - deep
          - critical-only

# Define environment variables
env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

# Security permissions
permissions:
  contents: read
  security-events: write
  actions: read
  id-token: write
  pull-requests: write
  issues: write

jobs:
  # ========================================
  # SECRET SCANNING
  # ========================================
  secret-scan:
    name: üîç Secret Detection
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better secret detection

      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch || 'main' }}
          head: HEAD
          extra_args: --debug --only-verified

      - name: Upload secret scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: secret-scan-results
          path: |
            gitleaks-report.json
            trufflehog-results.json
          retention-days: 30

  # ========================================
  # CODE QUALITY & SECURITY ANALYSIS
  # ========================================
  codeql-analysis:
    name: üß¨ CodeQL Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 360
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'python', 'javascript' ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          config-file: ./.github/codeql/codeql-config.yml
          queries: security-extended,security-and-quality

      - name: Setup Python
        if: matrix.language == 'python'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Python dependencies
        if: matrix.language == 'python'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Setup Node.js
        if: matrix.language == 'javascript'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Node dependencies
        if: matrix.language == 'javascript'
        run: npm ci

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"

  # ========================================
  # PYTHON SECURITY ANALYSIS
  # ========================================
  python-security:
    name: üêç Python Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit[toml] safety semgrep pipenv pip-audit

      - name: Install project dependencies
        run: |
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run Bandit security scan
        run: |
          bandit -r app/ -f json -o bandit-report.json || true
          bandit -r app/ -f txt

      - name: Run Safety vulnerability check
        run: |
          safety check --json --output safety-report.json || true
          safety check

      - name: Run pip-audit
        run: |
          pip-audit --format=json --output=pip-audit-report.json || true
          pip-audit

      - name: Run Semgrep
        run: |
          semgrep --config=auto --json --output=semgrep-report.json app/ || true
          semgrep --config=auto app/

      - name: Check for known security issues in Flask
        run: |
          python -c "
          import subprocess
          import json
          
          # Check Flask version
          result = subprocess.run(['pip', 'show', 'flask'], capture_output=True, text=True)
          print('Flask version check:')
          print(result.stdout)
          
          # Check for common Flask security misconfigurations
          print('\n=== Flask Security Checklist ===')
          with open('app/config.py', 'r') as f:
              config_content = f.read()
              if 'SECRET_KEY' in config_content and 'os.environ' not in config_content:
                  print('‚ö†Ô∏è  WARNING: SECRET_KEY might be hardcoded')
              if 'DEBUG = True' in config_content:
                  print('‚ö†Ô∏è  WARNING: DEBUG mode enabled in config')
              if 'TESTING = True' in config_content:
                  print('‚ö†Ô∏è  WARNING: TESTING mode enabled in config')
          "

      - name: Upload Python security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: python-security-reports
          path: |
            bandit-report.json
            safety-report.json
            pip-audit-report.json
            semgrep-report.json
          retention-days: 30

  # ========================================
  # DEPENDENCY VULNERABILITY SCAN
  # ========================================
  dependency-scan:
    name: üì¶ Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/python@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --json-file-output=snyk-report.json

      - name: Upload Snyk results to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: snyk.sarif

      - name: Setup Node.js for npm audit
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Run npm audit
        if: hashFiles('package.json') != ''
        run: |
          npm audit --audit-level=moderate --json > npm-audit-report.json || true
          npm audit

      - name: Upload dependency scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-scan-results
          path: |
            snyk-report.json
            npm-audit-report.json
          retention-days: 30

  # ========================================
  # CONTAINER SECURITY SCAN
  # ========================================
  container-scan:
    name: üê≥ Container Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event.inputs.scan_level != 'critical-only'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image for scanning
        run: |
          docker build -f docker/Dockerfile.prod -t security-scan:latest .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'security-scan:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Trivy config scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: './docker'
          format: 'sarif'
          output: 'trivy-config-results.sarif'

      - name: Scan Dockerfile with Hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: docker/Dockerfile.prod
          format: sarif
          output-file: hadolint-results.sarif

      - name: Upload Hadolint results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: hadolint-results.sarif

      - name: Upload container scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: container-scan-results
          path: |
            trivy-results.sarif
            trivy-config-results.sarif
            hadolint-results.sarif
          retention-days: 30

  # ========================================
  # INFRASTRUCTURE SECURITY SCAN
  # ========================================
  infrastructure-scan:
    name: üèóÔ∏è Infrastructure Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event.inputs.scan_level == 'deep' || github.event.inputs.scan_level == ''
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Checkov for Terraform/CloudFormation
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          quiet: true
          soft_fail: true
          framework: dockerfile,github_actions,yaml,json
          output_format: sarif
          output_file_path: checkov-results.sarif

      - name: Upload Checkov results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov-results.sarif

      - name: Scan GitHub Actions workflows
        run: |
          # Custom script to check GitHub Actions security
          python -c "
          import os
          import yaml
          import json
          
          workflow_dir = '.github/workflows'
          security_issues = []
          
          for filename in os.listdir(workflow_dir):
              if filename.endswith(('.yml', '.yaml')):
                  with open(os.path.join(workflow_dir, filename)) as f:
                      try:
                          workflow = yaml.safe_load(f)
                          
                          # Check for security issues
                          if 'on' in workflow:
                              if 'pull_request_target' in workflow['on']:
                                  security_issues.append(f'{filename}: Uses pull_request_target (potential security risk)')
                          
                          if 'jobs' in workflow:
                              for job_name, job in workflow['jobs'].items():
                                  if 'runs-on' in job and 'self-hosted' in str(job['runs-on']):
                                      security_issues.append(f'{filename}: Uses self-hosted runners')
                                  
                                  if 'steps' in job:
                                      for step in job['steps']:
                                          if 'uses' in step:
                                              action = step['uses']
                                              if '@main' in action or '@master' in action:
                                                  security_issues.append(f'{filename}: Uses unpinned action version: {action}')
                                          
                                          if 'run' in step and 'curl' in step['run'] and 'bash' in step['run']:
                                              security_issues.append(f'{filename}: Potential curl-to-bash execution')
                      except:
                          security_issues.append(f'{filename}: Could not parse YAML')
          
          if security_issues:
              print('GitHub Actions Security Issues Found:')
              for issue in security_issues:
                  print(f'‚ö†Ô∏è  {issue}')
          else:
              print('‚úÖ No GitHub Actions security issues found')
          
          # Save results
          with open('github-actions-security.json', 'w') as f:
              json.dump({'issues': security_issues}, f, indent=2)
          "

      - name: Upload infrastructure scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: infrastructure-scan-results
          path: |
            checkov-results.sarif
            github-actions-security.json
          retention-days: 30

  # ========================================
  # SECURITY CONFIGURATION AUDIT
  # ========================================
  security-config-audit:
    name: ‚öôÔ∏è Security Configuration Audit
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Audit Flask security configurations
        run: |
          python -c "
          import os
          import re
          import json
          
          findings = []
          
          # Check environment files
          env_files = ['.env.example', '.env.local']
          for env_file in env_files:
              if os.path.exists(env_file):
                  with open(env_file) as f:
                      content = f.read()
                      if 'SECRET_KEY=changeme' in content or 'SECRET_KEY=secret' in content:
                          findings.append(f'{env_file}: Weak default SECRET_KEY')
                      if 'DEBUG=True' in content or 'DEBUG=true' in content:
                          findings.append(f'{env_file}: DEBUG mode enabled')
          
          # Check Flask configuration
          config_files = ['app/config.py', 'config/base.py', 'config/production.py']
          for config_file in config_files:
              if os.path.exists(config_file):
                  with open(config_file) as f:
                      content = f.read()
                      
                      # Security headers check
                      if 'SECURE_SSL_REDIRECT' not in content:
                          findings.append(f'{config_file}: Missing SECURE_SSL_REDIRECT configuration')
                      if 'SESSION_COOKIE_SECURE' not in content:
                          findings.append(f'{config_file}: Missing SESSION_COOKIE_SECURE configuration')
                      if 'SESSION_COOKIE_HTTPONLY' not in content:
                          findings.append(f'{config_file}: Missing SESSION_COOKIE_HTTPONLY configuration')
                      if 'WTF_CSRF_ENABLED' not in content:
                          findings.append(f'{config_file}: Missing CSRF protection configuration')
          
          # Check requirements for known vulnerable packages
          req_files = ['requirements.txt', 'requirements-dev.txt']
          vulnerable_packages = {
              'flask==1.0.2': 'CVE-2018-1000656',
              'jinja2==2.10': 'CVE-2019-10906',
              'werkzeug==0.15.5': 'CVE-2019-14806'
          }
          
          for req_file in req_files:
              if os.path.exists(req_file):
                  with open(req_file) as f:
                      content = f.read()
                      for vuln_pkg, cve in vulnerable_packages.items():
                          if vuln_pkg in content:
                              findings.append(f'{req_file}: Vulnerable package {vuln_pkg} ({cve})')
          
          # Check Docker security
          docker_files = ['docker/Dockerfile.prod', 'docker/Dockerfile.dev', 'Dockerfile']
          for docker_file in docker_files:
              if os.path.exists(docker_file):
                  with open(docker_file) as f:
                      content = f.read()
                      if 'USER root' in content and 'USER ' not in content.replace('USER root', ''):
                          findings.append(f'{docker_file}: Running as root user')
                      if '--no-cache-dir' not in content:
                          findings.append(f'{docker_file}: pip install without --no-cache-dir')
          
          # Output results
          if findings:
              print('Security Configuration Issues:')
              for finding in findings:
                  print(f'‚ö†Ô∏è  {finding}')
          else:
              print('‚úÖ No security configuration issues found')
          
          # Save results
          with open('security-config-audit.json', 'w') as f:
              json.dump({'findings': findings}, f, indent=2)
          "

      - name: Upload security config audit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-config-audit
          path: security-config-audit.json
          retention-days: 30

  # ========================================
  # SECURITY REPORT CONSOLIDATION
  # ========================================
  security-report:
    name: üìã Security Report
    runs-on: ubuntu-latest
    needs: [secret-scan, codeql-analysis, python-security, dependency-scan, container-scan, infrastructure-scan, security-config-audit]
    if: always()
    timeout-minutes: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: security-reports

      - name: Generate consolidated security report
        run: |
          python -c "
          import os
          import json
          import datetime
          from pathlib import Path
          
          report = {
              'scan_date': datetime.datetime.now().isoformat(),
              'repository': '${{ github.repository }}',
              'commit_sha': '${{ github.sha }}',
              'branch': '${{ github.ref_name }}',
              'scan_level': '${{ github.event.inputs.scan_level }}' or 'standard',
              'summary': {
                  'total_issues': 0,
                  'critical': 0,
                  'high': 0,
                  'medium': 0,
                  'low': 0,
                  'info': 0
              },
              'scans': {}
          }
          
          # Process all report files
          reports_dir = Path('security-reports')
          if reports_dir.exists():
              for artifact_dir in reports_dir.iterdir():
                  if artifact_dir.is_dir():
                      scan_name = artifact_dir.name
                      report['scans'][scan_name] = {'files': [], 'issues': 0}
                      
                      for report_file in artifact_dir.glob('*.json'):
                          try:
                              with open(report_file) as f:
                                  data = json.load(f)
                                  report['scans'][scan_name]['files'].append({
                                      'file': report_file.name,
                                      'data': data
                                  })
                                  
                                  # Count issues (simplified)
                                  if isinstance(data, dict):
                                      if 'results' in data:
                                          report['scans'][scan_name]['issues'] += len(data['results'])
                                      elif 'issues' in data:
                                          report['scans'][scan_name]['issues'] += len(data['issues'])
                                      elif 'findings' in data:
                                          report['scans'][scan_name]['issues'] += len(data['findings'])
                          except:
                              pass
          
          # Calculate totals
          total_issues = sum(scan['issues'] for scan in report['scans'].values())
          report['summary']['total_issues'] = total_issues
          
          # Generate human-readable summary
          print('=== SECURITY SCAN SUMMARY ===')
          print(f'Repository: {report[\"repository\"]}')
          print(f'Scan Date: {report[\"scan_date\"]}')
          print(f'Commit: {report[\"commit_sha\"]}')
          print(f'Branch: {report[\"branch\"]}')
          print(f'Scan Level: {report[\"scan_level\"]}')
          print(f'Total Issues Found: {total_issues}')
          print()
          
          if total_issues > 0:
              print('Scan Results by Category:')
              for scan_name, scan_data in report['scans'].items():
                  if scan_data['issues'] > 0:
                      print(f'  - {scan_name}: {scan_data[\"issues\"]} issues')
          else:
              print('‚úÖ No security issues found!')
          
          # Save detailed report
          with open('consolidated-security-report.json', 'w') as f:
              json.dump(report, f, indent=2)
          
          # Create summary for GitHub
          summary = f'''## üîí Security Scan Results
          
          **Repository:** {report[\"repository\"]}  
          **Branch:** {report[\"branch\"]}  
          **Commit:** {report[\"commit_sha\"][:8]}  
          **Scan Date:** {report[\"scan_date\"]}  
          **Total Issues:** {total_issues}
          
          ### Scan Categories
          '''
          
          for scan_name, scan_data in report['scans'].items():
              status = '‚úÖ' if scan_data['issues'] == 0 else '‚ö†Ô∏è'
              summary += f'- {status} **{scan_name}**: {scan_data[\"issues\"]} issues\\n'
          
          # Save summary for step output
          with open('security-summary.md', 'w') as f:
              f.write(summary)
          "

      - name: Comment on PR with security results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('security-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

      - name: Upload consolidated security report
        uses: actions/upload-artifact@v4
        with:
          name: consolidated-security-report
          path: |
            consolidated-security-report.json
            security-summary.md
          retention-days: 90

      - name: Fail workflow if critical vulnerabilities found
        run: |
          python -c "
          import json
          import sys
          
          try:
              with open('consolidated-security-report.json') as f:
                  report = json.load(f)
              
              total_issues = report['summary']['total_issues']
              critical_scans = ['secret-scan-results', 'python-security-reports']
              
              critical_issues = 0
              for scan_name in critical_scans:
                  if scan_name in report['scans']:
                      critical_issues += report['scans'][scan_name]['issues']
              
              if critical_issues > 10:  # Threshold for critical failures
                  print(f'‚ùå Critical security issues found: {critical_issues}')
                  print('Workflow failed due to security concerns')
                  sys.exit(1)
              elif total_issues > 0:
                  print(f'‚ö†Ô∏è  {total_issues} security issues found but below critical threshold')
              else:
                  print('‚úÖ No security issues found')
          except:
              print('‚ö†Ô∏è  Could not evaluate security results')
          "

  # ========================================
  # SECURITY NOTIFICATION
  # ========================================
  notify-security-team:
    name: üì¢ Notify Security Team
    runs-on: ubuntu-latest
    needs: [security-report]
    if: always() && (needs.security-report.result == 'failure' || github.event.inputs.scan_level == 'deep')
    timeout-minutes: 5
    steps:
      - name: Send Slack notification
        if: env.SLACK_WEBHOOK_URL != ''
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "text": "üîí Security Scan Alert",
              "attachments": [
                {
                  "color": "danger",
                  "fields": [
                    {
                      "title": "Repository",
                      "value": "${{ github.repository }}",
                      "short": true
                    },
                    {
                      "title": "Branch",
                      "value": "${{ github.ref_name }}",
                      "short": true
                    },
                    {
                      "title": "Commit",
                      "value": "${{ github.sha }}",
                      "short": true
                    },
                    {
                      "title": "Status",
                      "value": "Security issues detected",
                      "short": true
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_SECURITY_WEBHOOK }}

      - name: Create security issue
        if: github.event_name == 'schedule' || github.event.inputs.scan_level == 'deep'
        uses: actions/github-script@v7
        with:
          script: |
            const title = `üîí Security Scan Report - ${new Date().toISOString().split('T')[0]}`;
            const body = `## Security Scan Results
            
            **Scan Date:** ${new Date().toISOString()}
            **Repository:** ${{ github.repository }}
            **Branch:** ${{ github.ref_name }}
            **Commit:** ${{ github.sha }}
            
            A comprehensive security scan has been completed. Please review the artifacts and address any findings.
            
            ### Next Steps
            1. Review the consolidated security report artifact
            2. Address any critical or high-severity findings
            3. Update dependencies if vulnerabilities are found
            4. Review and update security configurations as needed
            
            **Workflow Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            `;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['security', 'automated']
            });