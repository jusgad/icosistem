# ============================================================================
# ECOSISTEMA DE EMPRENDIMIENTO - PRE-COMMIT CONFIGURATION
# ============================================================================
# Pre-commit hooks for maintaining code quality and consistency
# Documentation: https://pre-commit.com/
# 
# Installation: pre-commit install
# Run manually: pre-commit run --all-files
# Update hooks: pre-commit autoupdate
# ============================================================================

# Minimum version of pre-commit required
minimum_pre_commit_version: '3.0.0'

# Default language version for Python hooks
default_language_version:
  python: python3.11

# Default stages for hooks (can be overridden per hook)
default_stages: [commit, push]

# Fail fast - stop running hooks after first failure
fail_fast: false

# ============================================================================
# REPOSITORY CONFIGURATION
# ============================================================================
repos:
  # ==========================================================================
  # BASIC FILE CHECKS
  # ==========================================================================
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      # File formatting and cleanup
      - id: trailing-whitespace
        name: Remove trailing whitespace
        description: Removes trailing whitespace from files
        args: [--markdown-linebreak-ext=md]
        exclude: ^(.*\.lock|.*\.min\.(js|css))$
      
      - id: end-of-file-fixer
        name: Fix end of files
        description: Ensures files end with a newline
        exclude: ^(.*\.lock|.*\.min\.(js|css))$
      
      - id: check-yaml
        name: Check YAML syntax
        description: Validates YAML files
        args: [--allow-multiple-documents]
        exclude: ^(.*\.min\.yml|.*\.lock)$
      
      - id: check-json
        name: Check JSON syntax
        description: Validates JSON files
        exclude: ^(.*\.min\.json|.*\.lock)$
      
      - id: check-xml
        name: Check XML syntax
        description: Validates XML files
      
      - id: check-toml
        name: Check TOML syntax
        description: Validates TOML files
      
      # Security and sensitive data checks
      - id: check-added-large-files
        name: Check for large files
        description: Prevents addition of large files
        args: [--maxkb=1024]  # 1MB limit
      
      - id: detect-private-key
        name: Detect private keys
        description: Prevents addition of private keys
      
      - id: check-merge-conflict
        name: Check merge conflicts
        description: Ensures no merge conflict markers remain
      
      # Code structure checks
      - id: check-ast
        name: Check Python AST
        description: Validates Python syntax
        language: python
        types: [python]
      
      - id: debug-statements
        name: Check debug statements
        description: Prevents debug statements in production
        language: python
        types: [python]
      
      # File naming and structure
      - id: check-case-conflict
        name: Check case conflicts
        description: Prevents case conflicts in filenames
      
      - id: check-docstring-first
        name: Check docstring first
        description: Ensures docstrings come first
        language: python
        types: [python]
      
      - id: check-executables-have-shebangs
        name: Check executable shebangs
        description: Ensures executables have shebangs
      
      - id: check-shebang-scripts-are-executable
        name: Check shebang executables
        description: Ensures shebang scripts are executable
      
      # Prevent problematic commits
      - id: no-commit-to-branch
        name: Prevent commits to main
        description: Prevents direct commits to protected branches
        args: [--branch, main, --branch, master, --branch, production]

  # ==========================================================================
  # PYTHON CODE FORMATTING
  # ==========================================================================
  - repo: https://github.com/psf/black
    rev: 23.11.0
    hooks:
      - id: black
        name: Format with Black
        description: Auto-format Python code with Black
        language: python
        args: [--line-length=88, --target-version=py311]
        types: [python]
        exclude: ^(migrations/|venv/|build/|dist/)

  - repo: https://github.com/pycqa/isort
    rev: 5.12.0
    hooks:
      - id: isort
        name: Sort imports with isort
        description: Sort Python imports
        language: python
        args: [--profile=black, --line-length=88, --multi-line=3]
        types: [python]
        exclude: ^(migrations/|venv/|build/|dist/)

  # ==========================================================================
  # PYTHON CODE LINTING
  # ==========================================================================
  - repo: https://github.com/pycqa/flake8
    rev: 6.1.0
    hooks:
      - id: flake8
        name: Lint with Flake8
        description: Python style guide enforcement
        language: python
        args: 
          - --max-line-length=88
          - --extend-ignore=E203,W503,E501
          - --max-complexity=10
          - --statistics
        types: [python]
        exclude: ^(migrations/|venv/|build/|dist/)
        additional_dependencies:
          - flake8-docstrings
          - flake8-import-order
          - flake8-bugbear
          - flake8-comprehensions
          - flake8-simplify
          - flake8-annotations
          - flake8-bandit

  - repo: https://github.com/pycqa/pylint
    rev: v3.0.3
    hooks:
      - id: pylint
        name: Lint with Pylint
        description: Advanced Python linting
        language: python
        args:
          - --rcfile=.pylintrc
          - --fail-under=8.0
          - --reports=no
        types: [python]
        exclude: ^(migrations/|tests/|venv/|build/|dist/)
        additional_dependencies:
          - flask
          - sqlalchemy
          - celery

  # ==========================================================================
  # TYPE CHECKING
  # ==========================================================================
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.7.1
    hooks:
      - id: mypy
        name: Type check with MyPy
        description: Static type checking
        language: python
        args: 
          - --ignore-missing-imports
          - --no-strict-optional
          - --warn-unreachable
          - --show-error-codes
        types: [python]
        exclude: ^(migrations/|tests/|venv/|build/|dist/)
        additional_dependencies:
          - types-requests
          - types-redis
          - types-PyYAML
          - types-python-dateutil

  # ==========================================================================
  # SECURITY CHECKS
  # ==========================================================================
  - repo: https://github.com/pycqa/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        name: Security check with Bandit
        description: Security linting for Python
        language: python
        args: 
          - -r
          - app/
          - --skip=B101,B601  # Skip assert and shell usage in tests
          - --severity-level=medium
          - --confidence-level=medium
        types: [python]
        exclude: ^(tests/|migrations/|venv/)

  - repo: https://github.com/gitguardian/ggshield
    rev: v1.25.0
    hooks:
      - id: ggshield
        name: GitGuardian secret scan
        description: Scan for secrets and credentials
        language: python
        stages: [commit, push]
        verbose: true

  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        name: Detect secrets
        description: Detect secrets in code
        args: ['--baseline', '.secrets.baseline']
        exclude: ^(.*\.lock|package-lock\.json|yarn\.lock)$

  # ==========================================================================
  # DEPENDENCY SECURITY
  # ==========================================================================
  - repo: https://github.com/Lucas-C/pre-commit-hooks-safety
    rev: v1.3.2
    hooks:
      - id: python-safety-dependencies-check
        name: Check dependency vulnerabilities
        description: Check for known security vulnerabilities
        files: requirements.*\.txt$

  - repo: https://github.com/trailofbits/pip-audit
    rev: v2.6.1
    hooks:
      - id: pip-audit
        name: Audit Python packages
        description: Audit Python packages for vulnerabilities
        args: [--desc, --format=text]

  # ==========================================================================
  # FLASK SPECIFIC CHECKS
  # ==========================================================================
  - repo: local
    hooks:
      - id: flask-security-check
        name: Flask security check
        description: Check Flask-specific security issues
        entry: python
        language: system
        args:
          - -c
          - |
            import os
            import re
            import sys
            
            issues = []
            
            # Check for debug mode in production files
            for root, dirs, files in os.walk('app'):
                for file in files:
                    if file.endswith('.py'):
                        filepath = os.path.join(root, file)
                        with open(filepath, 'r') as f:
                            content = f.read()
                            if 'app.run(debug=True)' in content:
                                issues.append(f'{filepath}: Debug mode enabled')
                            if 'SECRET_KEY' in content and '=' in content and not 'os.environ' in content:
                                issues.append(f'{filepath}: Hardcoded SECRET_KEY detected')
            
            if issues:
                print('\n'.join(issues))
                sys.exit(1)
        files: ^app/.*\.py$
        pass_filenames: false

      - id: check-flask-imports
        name: Check Flask imports
        description: Verify Flask imports are correct
        entry: python
        language: system
        args:
          - -c
          - |
            import ast
            import sys
            
            for filename in sys.argv[1:]:
                with open(filename, 'r') as f:
                    try:
                        tree = ast.parse(f.read())
                        # Check for proper Flask imports
                        for node in ast.walk(tree):
                            if isinstance(node, ast.ImportFrom):
                                if node.module == 'flask' and any(alias.name == 'Flask' for alias in node.names):
                                    continue
                    except SyntaxError:
                        print(f'Syntax error in {filename}')
                        sys.exit(1)
        files: ^app/.*\.py$

  # ==========================================================================
  # WEB TECHNOLOGIES
  # ==========================================================================
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v3.1.0
    hooks:
      - id: prettier
        name: Format with Prettier
        description: Format JS, CSS, HTML, JSON, YAML
        args: [--write, --tab-width=2, --single-quote, --trailing-comma=es5]
        types_or: [javascript, jsx, ts, tsx, css, scss, html, json, yaml, markdown]
        exclude: ^(.*\.min\.(js|css)|.*\.lock)$

  - repo: https://github.com/pre-commit/mirrors-eslint
    rev: v8.55.0
    hooks:
      - id: eslint
        name: Lint JavaScript with ESLint
        description: JavaScript linting
        args: [--fix]
        types: [javascript]
        exclude: ^(.*\.min\.js|node_modules/)
        additional_dependencies:
          - eslint@8.55.0
          - eslint-config-prettier@9.1.0

  # ==========================================================================
  # CSS AND STYLING
  # ==========================================================================
  - repo: https://github.com/awebdeveloper/pre-commit-stylelint
    rev: '0.0.2'
    hooks:
      - id: stylelint
        name: Lint CSS with Stylelint
        description: CSS/SCSS linting
        args: [--fix]
        types: [css, scss]
        exclude: ^(.*\.min\.css)$
        additional_dependencies:
          - stylelint@15.11.0
          - stylelint-config-standard@34.0.0

  # ==========================================================================
  # DOCUMENTATION
  # ==========================================================================
  - repo: https://github.com/executablebooks/mdformat
    rev: 0.7.17
    hooks:
      - id: mdformat
        name: Format Markdown
        description: Format Markdown files
        args: [--wrap=120]
        additional_dependencies:
          - mdformat-gfm
          - mdformat-black

  - repo: https://github.com/pycqa/pydocstyle
    rev: 6.3.0
    hooks:
      - id: pydocstyle
        name: Check docstring style
        description: Check Python docstring style
        args: [--convention=google, --add-ignore=D100,D104]
        types: [python]
        exclude: ^(tests/|migrations/|venv/)

  # ==========================================================================
  # YAML AND CONFIGURATION
  # ==========================================================================
  - repo: https://github.com/adrienverge/yamllint
    rev: v1.33.0
    hooks:
      - id: yamllint
        name: Lint YAML files
        description: YAML linting
        args: [-c, .yamllint.yml]
        types: [yaml]

  # ==========================================================================
  # DOCKER
  # ==========================================================================
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker
        name: Lint Dockerfiles
        description: Dockerfile linting
        args: [--ignore, DL3008, --ignore, DL3009]

  # ==========================================================================
  # SQL
  # ==========================================================================
  - repo: https://github.com/sqlfluff/sqlfluff
    rev: 2.3.5
    hooks:
      - id: sqlfluff-lint
        name: Lint SQL files
        description: SQL linting and formatting
        args: [--dialect=postgresql]
        types: [sql]

  # ==========================================================================
  # SHELL SCRIPTS
  # ==========================================================================
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.9.0.6
    hooks:
      - id: shellcheck
        name: Check shell scripts
        description: Shell script analysis
        args: [-e, SC1091]  # Ignore source file not found
        types: [shell]

  # ==========================================================================
  # EDITORCONFIG
  # ==========================================================================
  - repo: https://github.com/editorconfig-checker/editorconfig-checker.python
    rev: 2.7.3
    hooks:
      - id: editorconfig-checker
        name: Check EditorConfig compliance
        description: Validate EditorConfig rules
        args: [--exclude, 'venv|node_modules|\.git|__pycache__|\.tox|\.eggs|build|dist']

  # ==========================================================================
  # COMMIT MESSAGE FORMATTING
  # ==========================================================================
  - repo: https://github.com/commitizen-tools/commitizen
    rev: v3.13.0
    hooks:
      - id: commitizen
        name: Check commit message format
        description: Validate commit message format
        stages: [commit-msg]

  # ==========================================================================
  # CUSTOM LOCAL HOOKS
  # ==========================================================================
  - repo: local
    hooks:
      # Database migration checks
      - id: check-migrations
        name: Check database migrations
        description: Ensure migrations are properly formatted
        entry: python
        language: system
        args:
          - -c
          - |
            import os
            import sys
            
            migrations_dir = 'migrations/versions'
            if os.path.exists(migrations_dir):
                files = os.listdir(migrations_dir)
                for file in files:
                    if file.endswith('.py') and not file.startswith('_'):
                        with open(os.path.join(migrations_dir, file), 'r') as f:
                            content = f.read()
                            if 'def upgrade()' not in content:
                                print(f'Missing upgrade() function in {file}')
                                sys.exit(1)
                            if 'def downgrade()' not in content:
                                print(f'Missing downgrade() function in {file}')
                                sys.exit(1)
        files: ^migrations/versions/.*\.py$
        pass_filenames: false

      # Environment variables check
      - id: check-env-vars
        name: Check environment variables
        description: Ensure .env.example is updated
        entry: python
        language: system
        args:
          - -c
          - |
            import os
            import re
            import sys
            
            if os.path.exists('.env.example'):
                with open('.env.example', 'r') as f:
                    env_vars = set(re.findall(r'^([A-Z_]+)=', f.read(), re.MULTILINE))
                
                # Check if all environment variables in code are documented
                for root, dirs, files in os.walk('app'):
                    for file in files:
                        if file.endswith('.py'):
                            filepath = os.path.join(root, file)
                            with open(filepath, 'r') as f:
                                content = f.read()
                                # Find os.environ calls
                                env_calls = re.findall(r'os\.environ(?:\.get)?\([\'"]([A-Z_]+)[\'"]', content)
                                for var in env_calls:
                                    if var not in env_vars:
                                        print(f'Environment variable {var} used in {filepath} but not in .env.example')
        files: ^(app/.*\.py|\.env\.example)$
        pass_filenames: false

      # Requirements file sync check
      - id: check-requirements-sync
        name: Check requirements sync
        description: Ensure requirements files are synchronized
        entry: python
        language: system
        args:
          - -c
          - |
            import os
            import sys
            
            if os.path.exists('requirements.txt') and os.path.exists('requirements-dev.txt'):
                with open('requirements.txt', 'r') as f:
                    prod_reqs = f.read()
                with open('requirements-dev.txt', 'r') as f:
                    dev_reqs = f.read()
                
                # Check for duplicates
                prod_packages = set(line.split('==')[0] for line in prod_reqs.split('\n') if '==' in line)
                dev_packages = set(line.split('==')[0] for line in dev_reqs.split('\n') if '==' in line)
                
                duplicates = prod_packages.intersection(dev_packages)
                if duplicates:
                    print(f'Duplicate packages in requirements files: {duplicates}')
                    sys.exit(1)
        files: ^requirements.*\.txt$
        pass_filenames: false

      # Test coverage check
      - id: check-test-coverage
        name: Check test coverage
        description: Ensure adequate test coverage
        entry: python
        language: system
        args:
          - -c
          - |
            import os
            import sys
            
            # Check if tests exist for new Python files
            for root, dirs, files in os.walk('app'):
                for file in files:
                    if file.endswith('.py') and not file.startswith('__'):
                        module_path = os.path.join(root, file)
                        relative_path = os.path.relpath(module_path, 'app')
                        test_path = f'tests/test_{relative_path}'
                        
                        if not os.path.exists(test_path):
                            # Check if it's a new file (not in git)
                            exit_code = os.system(f'git ls-files --error-unmatch {module_path} >/dev/null 2>&1')
                            if exit_code != 0:  # File is not tracked
                                print(f'New file {module_path} has no corresponding test file')
        files: ^app/.*\.py$
        pass_filenames: false

# ============================================================================
# CI SPECIFIC CONFIGURATION
# ============================================================================
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit.com hooks
    
    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: [pylint, mypy]  # Skip slow hooks in CI
  submodules: false

# ============================================================================
# CONFIGURATION FILES TO CREATE
# ============================================================================
# This configuration references several files that should be created:
#
# .pylintrc - Pylint configuration
# .yamllint.yml - YAML linting rules
# .secrets.baseline - Baseline for detect-secrets
# .eslintrc.js - ESLint configuration
# .stylelintrc.json - Stylelint configuration
# .prettierrc - Prettier configuration
#
# Run: pre-commit install to set up the hooks
# Run: pre-commit run --all-files to test all files
# Run: pre-commit autoupdate to update hook versions
# ============================================================================